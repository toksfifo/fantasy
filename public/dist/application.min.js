"use strict";var ApplicationConfiguration=function(){var applicationModuleName="JogaBonito",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngSanitize","ui.router","ui.bootstrap","ui.utils","datatables"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("leagues"),ApplicationConfiguration.registerModule("market"),ApplicationConfiguration.registerModule("players"),ApplicationConfiguration.registerModule("teams"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar"),this.addMenuItem("topbar","Home","/","/"),this.addMenuItem("topbar","Team","teams/me","/teams"),this.addMenuItem("topbar","Market","market","/market")}]),angular.module("leagues").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Leagues","leagues","dropdown","/leagues(/create|/[a-fA-F0-9]{24}|/join|/[a-fA-F0-9]{24}/join)?"),Menus.addSubMenuItem("topbar","leagues","List Leagues","leagues"),Menus.addSubMenuItem("topbar","leagues","Create League","leagues/create")}]),angular.module("leagues").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLeagues",{url:"/leagues",templateUrl:"modules/leagues/views/list-leagues.client.view.html"}).state("createLeague",{url:"/leagues/create",templateUrl:"modules/leagues/views/create-league.client.view.html"}).state("viewLeague",{url:"/leagues/:leagueId",templateUrl:"modules/leagues/views/view-league.client.view.html"}).state("editLeague",{url:"/leagues/:leagueId/edit",templateUrl:"modules/leagues/views/edit-league.client.view.html"}).state("joinLeague",{url:"/leagues/:leagueId/join",templateUrl:"modules/leagues/views/join-league.client.view.html"})}]),angular.module("leagues").controller("LeaguesController",["$scope","$stateParams","$location","$modal","Authentication","Leagues",function($scope,$stateParams,$location,$modal,Authentication,Leagues){$scope.authentication=Authentication,$scope.create=function(){var league=new Leagues({name:this.name});league.$save(function(response){$location.path("leagues/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.join=function(){var league=$scope.league;league.passcode===this.passkey?(league.members.push($scope.authentication.user),league.$update(function(){$location.path("leagues/"+league._id),$scope.passkey=""},function(errorResponse){$scope.error=errorResponse.data.message})):$scope.error="Invalid league passcode"},$scope.remove=function(league){if(league){league.$remove();for(var i in $scope.leagues)$scope.leagues[i]===league&&$scope.leagues.splice(i,1)}else $scope.league.$remove(function(){$location.path("leagues")})},$scope.update=function(){var league=$scope.league;league.$update(function(){$location.path("leagues/"+league._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.leagues=Leagues.query()},$scope.findOne=function(){$scope.league=Leagues.get({leagueId:$stateParams.leagueId})},$scope.isMemberOf=function(league){var _league=league||$scope.league,members=_league.members;return members?-1!==members.map(function(member){return member._id}).indexOf($scope.authentication.user._id):!1},$scope.myTeamExists=function(league){var _league=league||$scope.league,teams=_league.teams;return teams?teams.filter(function(team){return team.user===$scope.authentication.user._id})[0]:!1},$scope.createTeam=function(){var modalInstance=$modal.open({templateUrl:"modules/teams/views/create-team.client.view.html",controller:"newTeamModalController",resolve:{league:function(){return $scope.league}}});modalInstance.result.then(function(response){$location.path("teams/"+response._id)})}}]),angular.module("teams").controller("newTeamModalController",["$scope","$modalInstance","league","Teams",function($scope,$modalInstance,league,Teams){$scope.create=function(){var team=new Teams({name:this.name,league:league._id});team.$save(function(response){league.teams.push(response._id),league.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}),$modalInstance.close(response)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("leagues").factory("Leagues",["$resource",function($resource){return $resource("leagues/:leagueId",{leagueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("market").run(["Menus",function(){}]),angular.module("market").config(["$stateProvider",function($stateProvider){$stateProvider.state("marketHome",{url:"/market",templateUrl:"modules/market/views/home-market.client.view.html"})}]),angular.module("market").controller("MarketController",["$scope","$stateParams","$location","Authentication","Players","DTOptionsBuilder","DTColumnDefBuilder",function($scope,$stateParams,$location,Authentication,Players,DTOptionsBuilder,DTColumnDefBuilder){$scope.authentication=Authentication,$scope.find=function(){$scope.players=Players.query()},$scope.selectedImage="",$scope.selectedText="",$scope.someClickHandler=function(info){$scope.selectedImage=info[0].replace("&amp;","&"),$scope.selectedText="<p>"+info[1]+"</p><p>"+info[3]+"</p>"},$scope.dtOptions=DTOptionsBuilder.fromFnPromise(function(){return Players.query().$promise}).withPaginationType("simple_numbers").withDisplayLength(16).withBootstrap().withScroller().withOption("deferRender",!0).withOption("scrollY",600).withOption("rowCallback",function(nRow,aData){return $("td",nRow).unbind("click"),$("td",nRow).bind("click",function(){$scope.$apply(function(){$scope.someClickHandler(aData)})}),nRow}),$scope.dtColumnDefs=[DTColumnDefBuilder.newColumnDef(0).notVisible(),DTColumnDefBuilder.newColumnDef(1),DTColumnDefBuilder.newColumnDef(2),DTColumnDefBuilder.newColumnDef(3),DTColumnDefBuilder.newColumnDef(4),DTColumnDefBuilder.newColumnDef(5).notVisible()],$scope.findOne=function(){$scope.player=Players.get({playerId:$stateParams.playerId})},$scope.update=function(){var player=$scope.player;player.$update(function(){$location.path("players/"+player._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("market").factory("Market",["$resource",function($resource){return $resource("market")}]),angular.module("players").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPlayers",{url:"/players",templateUrl:"modules/players/views/list-players.client.view.html"}).state("createPlayer",{url:"/players/create",templateUrl:"modules/players/views/create-player.client.view.html"}).state("viewPlayer",{url:"/players/:playerId",templateUrl:"modules/players/views/view-player.client.view.html"}).state("editPlayer",{url:"/players/:playerId/edit",templateUrl:"modules/players/views/edit-player.client.view.html"})}]),angular.module("players").controller("PlayersController",["$scope","$stateParams","$location","Authentication","Players",function($scope,$stateParams,$location,Authentication,Players){$scope.authentication=Authentication,$scope.create=function(){var player=new Players({name:this.name});player.$save(function(response){$location.path("players/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(player){if(player){player.$remove();for(var i in $scope.players)$scope.players[i]===player&&$scope.players.splice(i,1)}else $scope.player.$remove(function(){$location.path("players")})},$scope.update=function(){var player=$scope.player;player.$update(function(){$location.path("players/"+player._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.players=Players.query()},$scope.findOne=function(){$scope.player=Players.get({playerId:$stateParams.playerId})}}]),angular.module("players").factory("Players",["$resource",function($resource){return $resource("players/:playerId",{playerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("teams").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Teams","teams","dropdown","/teams(/create)?"),Menus.addSubMenuItem("topbar","teams","List Teams","teams"),Menus.addSubMenuItem("topbar","teams","New Team","teams/create")}]),angular.module("teams").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTeams",{url:"/teams",templateUrl:"modules/teams/views/list-teams.client.view.html"}).state("createTeam",{url:"/teams/create",templateUrl:"modules/teams/views/create-team.client.view.html"}).state("viewTeam",{url:"/teams/:teamId",templateUrl:"modules/teams/views/view-team.client.view.html"}).state("editTeam",{url:"/teams/:teamId/edit",templateUrl:"modules/teams/views/edit-team.client.view.html"})}]),angular.module("teams").controller("TeamsController",["$scope","$stateParams","$location","Authentication","Teams",function($scope,$stateParams,$location,Authentication,Teams){$scope.authentication=Authentication,$scope.remove=function(team){if(team){team.$remove();for(var i in $scope.teams)$scope.teams[i]===team&&$scope.teams.splice(i,1)}else $scope.team.$remove(function(){$location.path("teams")})},$scope.update=function(){var team=$scope.team;team.$update(function(){$location.path("teams/"+team._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.teams=Teams.query()},$scope.findOne=function(){$scope.team=Teams.get({teamId:$stateParams.teamId})}}]),angular.module("teams").factory("Teams",["$resource",function($resource){return $resource("teams/:teamId",{teamId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);